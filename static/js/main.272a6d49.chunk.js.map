{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","navigation/constants.ts","pages/FourLaws/index.ts","pages/FourLaws/FourLaws.tsx","navigation/RouterConfig.tsx","pages/Header/components/DrawerMenu/DrawerMenu.tsx","pages/Header/components/DrawerMenu/index.ts","pages/Header/components/TranslationMenu/TranslationMenu.tsx","pages/Header/components/TranslationMenu/index.ts","pages/Header/index.ts","pages/Header/Header.tsx","pages/App.tsx","pages/TranslationsProvider.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Routes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FourLaws","props","page","params","console","log","className","id","defaultMessage","description","RouterConfig","path","FOUR_LAWS_PAGE","component","to","FOUR_LAWS_ROOT","exampleLists","DrawerMenu","toggleDrawer","open","event","type","key","setState","state","Fragment","IconButton","edge","aria-label","onClick","this","Drawer","anchor","onClose","role","onKeyDown","List","ListSubheader","map","list","ListItem","button","Link","ListItemText","values","n","React","Component","locales","label","TranslationMenu","changeLanguage","language","onMenuClick","target","currentTarget","anchorEl","onMenuClose","aria-controls","aria-haspopup","keepMounted","locale","MenuItem","selected","Header","AppBar","position","Toolbar","THEME","createMuiTheme","typography","palette","primary","main","App","title","intl","formatMessage","theme","basename","injectIntl","translations","TranslationsProvider","bind","translation","messages","defaultLocale","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.272a6d49.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum Routes {\n    FOUR_LAWS_ROOT = '/4laws/0',\n    FOUR_LAWS_PAGE = '/4laws/:page'\n}","import FourLaws from './FourLaws';\n\nexport default FourLaws;","import React from 'react';\nimport './FourLaws.css';\nimport { FormattedMessage } from 'react-intl';\nimport { RouteComponentProps } from 'react-router-dom';\n\nexport interface IFourLawsProps { \n  page: string | undefined; \n}\n\nconst FourLaws: React.FC<RouteComponentProps<IFourLawsProps>> = (props) => {\n  // const { page } = useParams<any>();\n  \n  // const page = props.match.params.page;\n  const { match: { params: { page } } } = props;\n  console.log(page);\n  // const { params: { page } } = props.match;\n  // console.log(page);\n  // console.log(page);\n  // <span>Four Laws Generated</span>\n  return (\n    <div className=\"FourLaws\">\n      <div className=\"font13\">font-size 13:</div>\n      <div className=\"font13\">\n        <FormattedMessage \n          id=\"fourlaws.title\"\n          defaultMessage=\"Four Laws Title\"\n          description=\"Four Laws Title\"\n        />\n      </div>\n      <div className=\"font14\">font-size 14:</div>\n      <div className=\"font14\">\n        <FormattedMessage \n          id=\"fourlaws.title\"\n          defaultMessage=\"Four Laws Title\"\n          description=\"Four Laws Title\"\n        />\n      </div>\n      <div className=\"font16\">font-size 16:</div>\n      <div className=\"font16\">\n        <FormattedMessage \n          id=\"fourlaws.title\"\n          defaultMessage=\"Four Laws Title\"\n          description=\"Four Laws Title\"\n        />\n      </div>\n      <div className=\"font20\">font-size 20:</div>\n      <div className=\"font20\">\n        <FormattedMessage \n          id=\"fourlaws.title\"\n          defaultMessage=\"Four Laws Title\"\n          description=\"Four Laws Title\"\n        />\n      </div>\n      <div className=\"font30\">font-size 30:</div>\n      <div className=\"font30\">\n        <FormattedMessage \n          id=\"fourlaws.title\"\n          defaultMessage=\"Four Laws Title\"\n          description=\"Four Laws Title\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default FourLaws;\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport FourLaws from '../pages/FourLaws';\nimport { Routes } from './constants';\n\n\nconst RouterConfig: React.FC = () => {\n  return (\n    <Switch>\n      <Route path={Routes.FOUR_LAWS_PAGE} component={FourLaws} />\n      <Redirect to={Routes.FOUR_LAWS_ROOT} />\n    </Switch>\n  );\n};\n\nexport default RouterConfig;\n","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport './DrawerMenu.css';\n\nexport interface IDrawerMenuState {\n  open: boolean;\n}\n\nconst exampleLists: any[] = [\n  1,2,3,4\n];\n\nclass DrawerMenu extends React.Component<{}, IDrawerMenuState> {\n  \n  constructor(props: {}) {\n    super(props);\n    this.state = { open: false };\n  }\n\n  toggleDrawer = (open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent\n  ) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n      (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n    this.setState((state) => ({ ...state, open: open }));\n  };\n  \n  render() {\n    return (\n      <React.Fragment>\n        <IconButton \n          className=\"DrawerMenu-IconButton\"\n          edge=\"start\" \n          aria-label=\"menu\"\n          onClick={this.toggleDrawer(true)}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Drawer \n          anchor=\"right\"\n          open={this.state.open}\n          onClose={this.toggleDrawer(false)}\n        >\n          <div\n            role=\"presentation\"\n            onClick={this.toggleDrawer(false)}\n            onKeyDown={this.toggleDrawer(false)}\n          >\n            <List>\n              <ListSubheader>\n                <FormattedMessage \n                  id=\"drawerMenu.subheader\"\n                  defaultMessage=\"Four Spritual Laws\"\n                  description=\"Drawer Menu Subheader\"\n                />\n              </ListSubheader>\n              {\n                exampleLists.map(list => (\n                  <ListItem button key={list.id} component={Link} to=\"/\">\n                    <ListItemText>\n                      <FormattedMessage\n                        id=\"drawerMenu.laws\"\n                        defaultMessage=\"Law {n}\"\n                        description=\"Drawer Menu Link\"\n                        values={{ n: list }}\n                      />\n                    </ListItemText>\n                  </ListItem>\n                ))\n              }\n              \n            </List>\n          </div>\n        </Drawer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DrawerMenu;","import DrawerMenu from './DrawerMenu';\n\nexport default DrawerMenu;","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport './TranslationMenu.css';\nimport { IAppProps } from '../../../App';\nimport { Language, LanguageList } from '../../../../interfaces/language.interfaces';\n\nexport interface ITranslationMenuProps extends IAppProps {}\n\nexport interface ITranslationMenuState {\n  anchorEl: HTMLElement | null;\n}\n\nconst locales: LanguageList[] = [\n  { type: 'en', label: 'English' },\n  { type: 'ko', label: '한국어' }\n];\n\nclass TranslationMenu extends React.Component<ITranslationMenuProps, ITranslationMenuState> {\n  constructor(props: ITranslationMenuProps) {\n    super(props);\n    this.state = { anchorEl: null };\n  }\n\n  changeLanguage = (language: Language) => {\n    this.props.changeLanguage(language);\n  };\n\n  onMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.currentTarget;\n    this.setState(state => ({ ...state, anchorEl: target }));\n  };\n\n  onMenuClose = () => {\n    this.setState((state) => ({ ...state, anchorEl: null }));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <IconButton\n          className=\"TranslationMenu-IconButton\"\n          aria-label=\"i18n\"\n          aria-controls=\"i18n-menu\"\n          aria-haspopup=\"true\"\n          onClick={this.onMenuClick}\n        >\n          <LanguageIcon />\n        </IconButton>\n        <Menu\n          id=\"i18n-menu\"\n          anchorEl={this.state.anchorEl}\n          open={Boolean(this.state.anchorEl)}\n          onClose={this.onMenuClose}\n          keepMounted\n        >\n          {\n            locales.map(locale => (\n              <MenuItem \n                key={locale.type} \n                selected={locale.type === this.props.locale}\n                onClick={() => this.changeLanguage(locale.type)}\n              >\n                { locale.label }\n              </MenuItem>\n            ))\n          }\n        </Menu>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TranslationMenu;\n","import TranslationMenu from './TranslationMenu';\n\nexport default TranslationMenu;","import Header from './Header';\n\nexport default Header;","import AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport React from 'react';\nimport './Header.css';\nimport { IAppProps } from '../App';\nimport DrawerMenu from './components/DrawerMenu';\nimport TranslationMenu from './components/TranslationMenu';\n\nexport interface IHeaderProps extends IAppProps {\n  title: string;\n}\n\nclass Header extends React.Component<IHeaderProps> {\n  render() {\n    return (\n      <AppBar position=\"fixed\" className=\"Header\">\n        <Toolbar>\n          <div className=\"logo-placeholder\"></div>\n          <div className=\"spacing\"></div>\n          <TranslationMenu { ...this.props } />\n          <DrawerMenu />\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport { HashRouter } from 'react-router-dom';\nimport RouterConfig from '../navigation/RouterConfig';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport Header from './Header';\nimport { Language } from '../interfaces/language.interfaces';\nimport { injectIntl, WrappedComponentProps } from 'react-intl';\n\nexport interface IAppProps {\n  changeLanguage: (locale: Language) => void;\n  locale: Language;\n}\n\nconst THEME = createMuiTheme({\n  typography: {\n    \"fontFamily\": `\"Ikkeullim\", \"Helvetica\", \"Arial\", \"sans-serif\"`,\n    \"fontSize\": 14,\n    \"fontWeightLight\": 300,\n    \"fontWeightRegular\": 400,\n    \"fontWeightMedium\": 500\n  },\n  palette: {\n    primary: { main: '#FFFFFF' }\n  }\n});\n\nclass App extends React.Component<IAppProps & WrappedComponentProps, {}> {\n  render() {\n    const { intl } = this.props;\n    const title = intl.formatMessage({\n      id: 'header.title',\n      defaultMessage: \"Example Title\",\n      description: \"Header Title\"\n    });\n    return (\n      <MuiThemeProvider theme={THEME}>\n        <HashRouter basename=\"/\">\n          <div className=\"App\">\n            <Header title={title} { ...this.props } ></Header>\n            <RouterConfig />\n          </div>\n        </HashRouter>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default injectIntl(App);\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport App from './App';\nimport locale_en from '../assets/i18n/en.json';\nimport locale_ko from '../assets/i18n/ko.json';\nimport { Language } from '../interfaces/language.interfaces';\n\nconst translations: any = {\n  'en': locale_en,\n  'ko': locale_ko\n};\n\nexport interface ITranslationsProviderState {\n  locale: Language;\n}\n\nclass TranslationsProvider extends React.Component<{}, ITranslationsProviderState> {\n  constructor(props: {}) {\n    super(props);\n    this.changeLanguage = this.changeLanguage.bind(this);\n\n    this.state = { locale: 'en' };\n  }\n\n  changeLanguage(locale: Language) {\n    this.setState((state) => ({ ...state, locale }));\n  }\n\n  public render() {\n    const translation = translations[this.state.locale];\n    return (\n      <IntlProvider key={this.state.locale} locale={this.state.locale} messages={translation} defaultLocale=\"en\">\n        <App changeLanguage={this.changeLanguage} locale={this.state.locale} />\n      </IntlProvider>\n    );\n  }\n}\n\nexport default TranslationsProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport TranslationsProvider from './pages/TranslationsProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TranslationsProvider />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}