{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","navigation/constants.ts","pages/FourLaws/index.ts","pages/FourLaws/FourLaws.tsx","navigation/RouterConfig.tsx","pages/App.tsx","pages/TranslationsProvider.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Routes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FourLaws","props","page","params","console","log","id","defaultMessage","description","RouterConfig","path","FOUR_LAWS_PAGE","component","to","FOUR_LAWS_ROOT","App","locales","changeLanguage","bind","this","locale","className","onClick","React","Component","translations","TranslationsProvider","state","setState","translation","messages","defaultLocale","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6WAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,ICFYC,EDcGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+EEPCQ,ECMyC,SAACC,GAAU,IAItCC,EAAaD,EAAhCZ,MAASc,OAAUD,KAM3B,OALAE,QAAQC,IAAIH,GAMV,cAAC,IAAD,CACEI,GAAG,iBACHC,eAAe,kBACfC,YAAY,sB,SFtBNlB,K,0BAAAA,E,+BAAAA,M,KGMZ,IASemB,EAT+B,WAC5C,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAMpB,EAAOqB,eAAgBC,UAAWZ,IAC/C,cAAC,IAAD,CAAUa,GAAIvB,EAAOwB,qBCyDZC,E,kDAjDb,WAAYd,GAAgB,IAAD,8BACzB,cAAMA,IANAe,QAAe,CACrB,GAAM,UACN,GAAM,sBAKN,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAFG,E,6DAMzBC,KAAKlB,MAAMgB,eAAqC,OAAtBE,KAAKlB,MAAMmB,OAAkB,KAAM,Q,+BAI7D,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,wBAAQC,QAASH,KAAKF,eAAtB,SAC0B,OAAtBE,KAAKlB,MAAMmB,OAAkBD,KAAKH,QAAL,GAAoBG,KAAKH,QAAL,OAGvD,cAAC,IAAD,UACE,cAAC,EAAD,a,GAzBQO,IAAMC,WCHlBC,EAAoB,CACxB,G,MACA,G,OA6BaC,E,kDArBb,WAAYzB,GAAY,IAAD,8BACrB,cAAMA,IACDgB,eAAiB,EAAKA,eAAeC,KAApB,gBAEtB,EAAKS,MAAQ,CAAEP,OAAQ,MAJF,E,2DAORA,GACbD,KAAKS,SAAS,CAAER,a,+BAIhB,IAAMS,EAAcJ,EAAaN,KAAKQ,MAAMP,QAC5C,OACE,cAAC,IAAD,CAAsCA,OAAQD,KAAKQ,MAAMP,OAAQU,SAAUD,EAAaE,cAAc,KAAtG,SACE,cAAC,EAAD,CAAKd,eAAgBE,KAAKF,eAAgBG,OAAQD,KAAKQ,MAAMP,UAD5CD,KAAKQ,MAAMP,Y,GAfDG,IAAMC,WCVzCQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SRyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAC8C,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNvC,QAAQuC,MAAMA,EAAMC,YQpH5BrD,M","file":"static/js/main.052eab76.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum Routes {\r\n    FOUR_LAWS_ROOT = '/4laws/0',\r\n    FOUR_LAWS_PAGE = '/4laws/:page'\r\n}","import FourLaws from \"./FourLaws\";\r\n\r\nexport default FourLaws;","import React from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ninterface IProps { \r\n  page: string | undefined; \r\n}\r\n\r\nconst FourLaws: React.FC<RouteComponentProps<IProps>> = (props) => {\r\n  // const { page } = useParams<any>();\r\n  \r\n  // const page = props.match.params.page;\r\n  const { match: { params: { page } } } = props;\r\n  console.log(page);\r\n  // const { params: { page } } = props.match;\r\n  // console.log(page);\r\n  // console.log(page);\r\n  // <span>Four Laws Generated</span>\r\n  return (\r\n    <FormattedMessage \r\n      id=\"fourlaws.title\"\r\n      defaultMessage=\"Four Laws Title\"\r\n      description=\"Four Laws Title\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default FourLaws;\r\n","import * as React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport FourLaws from '../pages/FourLaws';\r\nimport { Routes } from './constants';\r\n\r\n\r\nconst RouterConfig: React.FunctionComponent = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path={Routes.FOUR_LAWS_PAGE} component={FourLaws} />\r\n      <Redirect to={Routes.FOUR_LAWS_ROOT} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default RouterConfig;\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport RouterConfig from '../navigation/RouterConfig';\nimport { Language } from './TranslationsProvider';\n\ninterface IProps {\n  changeLanguage: (locale: Language) => void;\n  locale: Language;\n}\n\nclass App extends React.Component<IProps> {\n\n  private locales: any = {\n    'en': 'English',\n    'ko': '한국어'\n  };\n\n  constructor(props: IProps) {\n    super(props);\n    this.changeLanguage = this.changeLanguage.bind(this);\n  }\n\n  changeLanguage() {\n    this.props.changeLanguage(this.props.locale === 'en' ? 'ko': 'en');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <button onClick={this.changeLanguage}>\n            { this.props.locale === 'en' ? this.locales['ko']: this.locales['en'] }\n          </button>\n        </header>\n        <BrowserRouter>\n          <RouterConfig />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//       <BrowserRouter>\n//         <RouterConfig />\n//       </BrowserRouter>\n//     </div>\n//   );\n// }\n\nexport default App;\n","import React from 'react';\r\nimport { IntlProvider } from 'react-intl';\r\nimport App from './App';\r\nimport locale_en from '../translations/locales/en.json';\r\nimport locale_ko from '../translations/locales/ko.json';\r\n\r\nexport type Language = 'en' | 'ko';\r\n\r\nconst translations: any = {\r\n  'en': locale_en,\r\n  'ko': locale_ko\r\n};\r\n\r\ninterface IState {\r\n  locale: Language;\r\n}\r\n\r\nclass TranslationsProvider extends React.Component<{}, IState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.changeLanguage = this.changeLanguage.bind(this);\r\n\r\n    this.state = { locale: 'en' };\r\n  }\r\n\r\n  changeLanguage(locale: Language) {\r\n    this.setState({ locale });\r\n  }\r\n\r\n  public render() {\r\n    const translation = translations[this.state.locale];\r\n    return (\r\n      <IntlProvider key={this.state.locale} locale={this.state.locale} messages={translation} defaultLocale=\"en\">\r\n        <App changeLanguage={this.changeLanguage} locale={this.state.locale} />\r\n      </IntlProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TranslationsProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport TranslationsProvider from './pages/TranslationsProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TranslationsProvider />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}